{"version":3,"sources":["../../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","headers","basicAuth","length","options","targets","Array","when","data","query","sql","limit","offset","project","acceptPartial","iterablePromise","target","queryData","push","getPromise","Promise","all","then","results","renderedData","i","result","dataPointArray","res","iRes","parseInt","Date","getTime","datapoints","catch","console","log","reason","datasourceRequest","method","response","status","message","title","interpolated","replace","mapToTextValue","map","d","text","value","isObject"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n\tconstructor(instanceSettings, $q, backendSrv, templateSrv) {\n\t\tthis.type = instanceSettings.type;\n\t\tthis.url = instanceSettings.url;\n\t\tthis.name = instanceSettings.name;\n\t\tthis.q = $q;\n\t\tthis.backendSrv = backendSrv;\n\t\tthis.templateSrv = templateSrv;\n\t\tthis.headers = {'Content-Type': 'application/json'};\n\t\tif (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n\t\t\tthis.headers['Authorization'] = instanceSettings.basicAuth;\n\t\t}\n\t}\n\n\tquery(options) {\n\t\tconst targets = options.targets;\n\n\t\tif (!(targets instanceof Array) || targets.length <= 0) {\n\t\t\treturn this.q.when({data: []});\n\t\t}\n\n\t\tconst url = '/kylin/api/query';\n\n\t\tconst query = {\n\t\t\tsql: 'select hour_start,count(*) from db_channel.channel group by hour_start',\n\t\t\tlimit: 1000,\n\t\t\toffset: 0,\n\t\t\tproject: 'streaming',\n\t\t\tacceptPartial: true\n\t\t};\n\t\tconst iterablePromise = [];\n\n\t\tfor (let target of targets) {\n\n\t\t\tconst queryData = {\n\t\t\t\tsql: target.sql,\n\t\t\t\tlimit: target.limit,\n\t\t\t\toffset: target.offset,\n\t\t\t\tproject: target.project,\n\t\t\t\tacceptPartial: target.acceptPartial\n\t\t\t};\n\n\t\t\titerablePromise.push(this.getPromise(url, queryData));\n\t\t}\n\n\t\treturn Promise.all(iterablePromise).then(function (results) {\n\n\t\t\tif (!results || results.length <= 0) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tconst renderedData = [];\n\n\t\t\tfor(let i = 0; i< results.length; i++) {\n\n\t\t\t\tconst result = results[i];\n\t\t\t\tconst dataPointArray = [];\n\t\t\t\tconst res = result.data.results;\n\n\t\t\t\tfor (let iRes of res) {\n\t\t\t\t\tdataPointArray.push([parseInt(iRes[1], 10), new Date(iRes[0]).getTime()]);\n\t\t\t\t}\n\n\t\t\t\trenderedData.push({\n\t\t\t\t\tdatapoints: dataPointArray,\n\t\t\t\t\ttarget: targets[i].target\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn {data: renderedData};\n\t\t}).catch(reason => {\n\t\t\tconsole.log(reason)\n\t\t});\n\t}\n\n\tgetPromise(url, query) {\n\t\treturn this.backendSrv.datasourceRequest({\n\t\t\turl: this.url + url,\n\t\t\tdata: query,\n\t\t\tmethod: 'POST',\n\t\t\theaders: this.headers\n\t\t})\n\t}\n\n\ttestDatasource() {\n\t\treturn this.backendSrv.datasourceRequest({\n\t\t\turl: this.url + '/kylin/api/user/authentication',\n\t\t\tmethod: 'GET',\n\t\t\theaders: this.headers\n\t\t}).then(response => {\n\t\t\tif (response.status === 200) {\n\t\t\t\treturn {status: \"success\", message: \"Data source is working\", title: \"Success\"};\n\t\t\t}\n\t\t});\n\t}\n\n\t// annotationQuery(options) {\n\t// \tconsole.log('annotation query', options);\n\t// \tdebugger;\n\t// \tvar query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n\t// \tvar annotationQuery = {\n\t// \t\trange: options.range,\n\t// \t\tannotation: {\n\t// \t\t\tname: options.annotation.name,\n\t// \t\t\tdatasource: options.annotation.datasource,\n\t// \t\t\tenable: options.annotation.enable,\n\t// \t\t\ticonColor: options.annotation.iconColor,\n\t// \t\t\tquery: query\n\t// \t\t},\n\t// \t\trangeRaw: options.rangeRaw\n\t// \t};\n\t//\n\t// \treturn this.backendSrv.datasourceRequest({\n\t// \t\turl: this.url + '/annotations',\n\t// \t\tmethod: 'POST',\n\t// \t\theaders: this.headers,\n\t// \t\tdata: annotationQuery\n\t// \t}).then(result => {\n\t// \t\treturn result.data;\n\t// \t});\n\t// }\n\n\tmetricFindQuery(options) {\n\t\tconsole.log('metricFindQuery', options);\n\n\t\tconst target = typeof (options) === \"string\" ? options : options.target;\n\t\tconst interpolated = {\n\t\t\ttarget: this.templateSrv.replace(target, null, 'regex')\n\t\t};\n\n\t\treturn this.backendSrv.datasourceRequest({\n\t\t\turl: this.url + '/search',\n\t\t\tdata: interpolated,\n\t\t\tmethod: 'POST',\n\t\t\theaders: this.headers\n\t\t}).then(this.mapToTextValue);\n\t}\n\n\tmapToTextValue(result) {\n\t\tconsole.log('mapToTextValue', result);\n\n\t\treturn _.map(result.data, (d, i) => {\n\t\t\tif (d && d.text && d.value) {\n\t\t\t\treturn {text: d.text, value: d.value};\n\t\t\t} else if (_.isObject(d)) {\n\t\t\t\treturn {text: d, value: i};\n\t\t\t}\n\t\t\treturn {text: d, value: d};\n\t\t});\n\t}\n\n\t// buildQueryParameters(options) {\n\t// \t//remove placeholder targets\n\t// \tconsole.log('buildQueryParameters', options);\n\t// \tdebugger;\n\t//\n\t// \toptions.targets = _.filter(options.targets, target => {\n\t// \t\treturn target.target !== 'select metric';\n\t// \t});\n\t//\n\t// \tvar targets = _.map(options.targets, target => {\n\t// \t\treturn {\n\t// \t\t\ttarget: this.templateSrv.replace(target.target),\n\t// \t\t\trefId: target.refId,\n\t// \t\t\thide: target.hide,\n\t// \t\t\ttype: target.type || 'timeserie'\n\t// \t\t};\n\t// \t});\n\t//\n\t// \toptions.targets = targets;\n\t//\n\t// \treturn options;\n\t// }\n}\n"]}