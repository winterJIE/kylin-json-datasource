{"version":3,"sources":["../../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","console","log","arguments","type","url","name","q","headers","basicAuth","length","options","query","sql","limit","offset","project","acceptPartial","target","Array","result","datasourceRequest","data","method","then","response","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","interpolated","mapToTextValue","map","d","i","text","value","isObject","targets","filter","refId","hide"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n\tconstructor(instanceSettings, $q, backendSrv, templateSrv) {\n\t\tconsole.log(arguments);\n\t\tthis.type = instanceSettings.type;\n\t\tthis.url = instanceSettings.url;\n\t\tthis.name = instanceSettings.name;\n\t\tthis.q = $q;\n\t\tthis.backendSrv = backendSrv;\n\t\tthis.templateSrv = templateSrv;\n\t\tthis.headers = {'Content-Type': 'application/json'};\n\t\tif (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n\t\t\tthis.headers['Authorization'] = instanceSettings.basicAuth;\n\t\t}\n\t}\n\n\tquery(options) {\n\t\tconsole.log('query options', options);\n\t\t// var query = this.buildQueryParameters(options);\n\t\t// query.targets = query.targets.filter(t => !t.hide);\n\t\t//\n\t\t// if (query.targets.length <= 0) {\n\t\t// \treturn this.q.when({data: []});\n\t\t// }\n\n\t\tvar query = {\n\t\t\tsql: 'select hour_start,count(*) from db_channel.channel group by hour_start',\n\t\t\tlimit: 1000,\n\t\t\toffset: 0,\n\t\t\tproject: 'streaming',\n\t\t\tacceptPartial: true\n\t\t};\n\t\tvar target = options.target;\n\t\tif(target instanceof Array && target.length > 0) {\n\t\t\tquery = target[0];\n\t\t}\n\n\t\tconsole.log('query data', query);\n\t\tconst result = this.backendSrv.datasourceRequest({\n\t\t\turl: this.url + '/kylin/api/query',\n\t\t\tdata: query,\n\t\t\tmethod: 'POST',\n\t\t\theaders: this.headers\n\t\t});\n\t\tconsole.log('result', result);\n\t\treturn result;\n\t}\n\n\ttestDatasource() {\n\t\treturn this.backendSrv.datasourceRequest({\n\t\t\turl: this.url + '/kylin/api/user/authentication',\n\t\t\tmethod: 'GET',\n\t\t\theaders: this.headers\n\t\t}).then(response => {\n\t\t\tif (response.status === 200) {\n\t\t\t\treturn {status: \"success\", message: \"Data source is working\", title: \"Success\"};\n\t\t\t}\n\t\t});\n\t}\n\n\tannotationQuery(options) {\n\t\tconsole.log('annotation query', options);\n\t\tdebugger;\n\t\tvar query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n\t\tvar annotationQuery = {\n\t\t\trange: options.range,\n\t\t\tannotation: {\n\t\t\t\tname: options.annotation.name,\n\t\t\t\tdatasource: options.annotation.datasource,\n\t\t\t\tenable: options.annotation.enable,\n\t\t\t\ticonColor: options.annotation.iconColor,\n\t\t\t\tquery: query\n\t\t\t},\n\t\t\trangeRaw: options.rangeRaw\n\t\t};\n\n\t\treturn this.backendSrv.datasourceRequest({\n\t\t\turl: this.url + '/annotations',\n\t\t\tmethod: 'POST',\n\t\t\theaders: this.headers,\n\t\t\tdata: annotationQuery\n\t\t}).then(result => {\n\t\t\treturn result.data;\n\t\t});\n\t}\n\n\tmetricFindQuery(options) {\n\t\tconsole.log('metricFindQuery', options);\n\t\tdebugger;\n\n\t\tvar target = typeof (options) === \"string\" ? options : options.target;\n\t\tvar interpolated = {\n\t\t\ttarget: this.templateSrv.replace(target, null, 'regex')\n\t\t};\n\n\t\treturn this.backendSrv.datasourceRequest({\n\t\t\turl: this.url + '/search',\n\t\t\tdata: interpolated,\n\t\t\tmethod: 'POST',\n\t\t\theaders: this.headers\n\t\t}).then(this.mapToTextValue);\n\t}\n\n\tmapToTextValue(result) {\n\t\tconsole.log('mapToTextValue', result);\n\t\tdebugger;\n\n\t\treturn _.map(result.data, (d, i) => {\n\t\t\tif (d && d.text && d.value) {\n\t\t\t\treturn {text: d.text, value: d.value};\n\t\t\t} else if (_.isObject(d)) {\n\t\t\t\treturn {text: d, value: i};\n\t\t\t}\n\t\t\treturn {text: d, value: d};\n\t\t});\n\t}\n\n\tbuildQueryParameters(options) {\n\t\t//remove placeholder targets\n\t\tconsole.log('buildQueryParameters', options);\n\t\tdebugger;\n\n\t\toptions.targets = _.filter(options.targets, target => {\n\t\t\treturn target.target !== 'select metric';\n\t\t});\n\n\t\tvar targets = _.map(options.targets, target => {\n\t\t\treturn {\n\t\t\t\ttarget: this.templateSrv.replace(target.target),\n\t\t\t\trefId: target.refId,\n\t\t\t\thide: target.hide,\n\t\t\t\ttype: target.type || 'timeserie'\n\t\t\t};\n\t\t});\n\n\t\toptions.targets = targets;\n\n\t\treturn options;\n\t}\n}\n"]}