{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","headers","basicAuth","length","options","query","buildQueryParameters","targets","filter","t","hide","when","data","datasourceRequest","method","then","response","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","target","interpolated","mapToTextValue","map","d","i","text","value","isObject","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/query',\n      data: query,\n      method: 'POST',\n      headers: this.headers\n    });\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/',\n      method: 'GET',\n      headers: this.headers\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      headers: this.headers,\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(options) {\n    var target = typeof (options) === \"string\" ? options : options.target;\n    var interpolated = {\n        target: this.templateSrv.replace(target, null, 'regex')\n    };\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/search',\n      data: interpolated,\n      method: 'POST',\n      headers: this.headers\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}